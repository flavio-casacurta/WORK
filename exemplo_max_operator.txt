import operator
x = {'a': 1000, 'b': 3000, 'c':100}
max(x.iteritems(), key = operator.itemgetter(1))[0]

Vantagem de usar iteritems() é o consumo de memória, pois gera um iterator
em vez de toda lista de tuplas em memória.

dict.iteritems(): Return an **iterator** over the dictionary’s (key,
value) pairs.


max(zip(*zip(*x.items())[::-1]))[1]

sorted(x.items(), key=lambda x: x[1])[-1]


time_dict_value_max.py
======================

import timeit

t = timeit.Timer("v=sorted(d.items(), key=lambda x: x[1])[-1]",
        "d = {'a': 1000, 'b': 3000, 'c':100}")
print t.timeit()
# 1.648s

t = timeit.Timer("v=max(d.iteritems(), key = operator.itemgetter(1))[0]",
        "import operator; d = {'a': 1000, 'b': 3000, 'c':100}")
print t.timeit()
# 0.759s

t = timeit.Timer("v=max(zip(*zip(*d.items())[::-1]))[1]",
        "d = {'a': 1000, 'b': 3000, 'c':100}")
print t.timeit()
# 1.672s

t = timeit.Timer("v=max(d, key=d.get)",
        "d = {'a': 1000, 'b': 3000, 'c':100}")
print t.timeit()
# 0.499s


